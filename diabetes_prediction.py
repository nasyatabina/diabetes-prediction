# -*- coding: utf-8 -*-
"""diabetes prediction

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qjgMX8rMa_ieLVI_wZHqT8ZiQ9ZJ7_zK
"""

import numpy as np
import pandas as pd
from sklearn.datasets import load_diabetes

#Load dataset
db = load_diabetes()
x = db.data
y = db.target

#Buat DataFrame
df = pd.DataFrame(x, columns=db.feature_names)
df['target'] = y  #Tambahkan target ke DataFrame

print(df.head(10))

df.isnull().sum()

#Statistik Dasar
print("Statistik Deskriptif Data:")
print(df.describe())  #Statistik dasar untuk setiap fitur

print("\n Korelasi antar fitur:")
print(df.corr())  #Korelasi antar fitur dengan target

print("\n Distribusi target:")
print(df['target'].describe())  #Statistik untuk target

print("Mean target value:", np.mean(y))

#Ubah target menjadi kategori biner (Rendah/Tinggi (berdasarkan mean))
y_binary = (y > np.mean(y)).astype(int)
df['target_binary'] = y_binary

print("\n Jumlah sampel tiap kelas (Setelah binarisasi target):")
print(df['target_binary'].value_counts())  #Cek distribusi kelas

print(df[['target', 'target_binary']].head(10))

import seaborn as sns
import matplotlib.pyplot as plt

corr = df.corr()
plt.figure(figsize=(10,8))
sns.heatmap(corr, annot=True, cmap='coolwarm')
plt.show()

#Visualisasi korelasi BMI dengan Kadar Diabetes (Target)
import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(7, 5))
sns.scatterplot(x=df["bmi"], y=df["target"], color="darkorange")
plt.title("Hubungan BMI dengan Target")
plt.xlabel("BMI")
plt.ylabel("Kadar Diabetes")
plt.show()

#Visualisasi kolerasi kadar glukosa dengan kadar diabetes (target)
plt.figure(figsize=(7, 5))
sns.scatterplot(x=df["s5"], y=df["target"], color="teal")
plt.title("Hubungan Glukosa (s5) dengan Target")
plt.xlabel("Glukosa (s5)")
plt.ylabel("Kadar Diabetes")
plt.show()

from sklearn.model_selection import train_test_split

#Split data (80% train, 20% test)
x_train, x_test, y_train, y_test = train_test_split(x, y_class, test_size=0.2, random_state=42, stratify=y_class)

#Cek jumlah data per kelas setelah split
print(pd.Series(y_train).value_counts())
print(pd.Series(y_test).value_counts())

from imblearn.over_sampling import SMOTE  # Import SMOTE
smote = SMOTE(random_state=42)
x_train_resampled, y_train_resampled = smote.fit_resample(x_train, y_train)

# Cek distribusi kelas setelah SMOTE
print(pd.Series(y_train_resampled).value_counts())

logreg_resampled = LogisticRegression(random_state=42, max_iter=1000)
logreg_resampled.fit(x_train_resampled, y_train_resampled)

# Prediksi ulang
y_pred_resampled = logreg_resampled.predict(x_test)

from sklearn.metrics import accuracy_score, classification_report

# Evaluasi akurasi
accuracy_resampled = accuracy_score(y_test, y_pred_resampled)
print(f"Accuracy after resampling: {accuracy_resampled:.4f}")

# Laporan klasifikasi
print(classification_report(y_test, y_pred_resampled))

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report

#Inisiasi model
model = LogisticRegression(class_weight='balanced', random_state=42, max_iter=1000)

#Latih model di data training
model.fit(x_train, y_train)

#prediksi di data testing
y_pred = model.predict (x_test)

#Evaluaasi model:mengukur akurasi model
accuracy = accuracy_score (y_test, y_pred)
print (f"Accuracy :{accuracy:.4f}")

#laporan klasifikasi
print(classification_report(y_test, y_pred ))

from sklearn.ensemble import RandomForestClassifier

#inisiasi model rf
rf_model = RandomForestClassifier(random_state= 42, n_estimators =100)

#Latih model di data train
rf_model.fit (x_train, y_train)

#prediksi data testing
y_pred_rf = rf_model.predict (x_test)

#evaluasi
accuracy_rf = accuracy_score(y_test, y_pred_rf)
print(f"Accuracy Random Forest :{accuracy_rf:.4f}")

#laporan
print(classification_report(y_test, y_pred_rf))